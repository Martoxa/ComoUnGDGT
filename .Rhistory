setwd("C:/Users/marto/OneDrive/Documents/GitHub/ComoUnGDGT")
dataM<-read.csv(file("test_ds_missing.csv"),head=TRUE,sep=',')
dataM
source("Data_manipulation.R")
source("Indices.R")
FdataM<-FracA(dataM)
FdataM<-FracA(dataM,coerce = TRUE)
raw<-dataM
GDGTn<-c("GDGT0","GDGT1","GDGT2","GDGT3","Crena","Crenp","IIIa5","IIIa6","IIIb5","IIIb6","IIIc5","IIIc6","IIa5","IIa6","IIb5","IIb6","IIc5","IIc6","Ia","Ib","Ic")
GDGTn[is.na(match(GDGTn,colnames(raw)))]
?paste
paste(noGDGT)
noGDGT<-GDGTn[is.na(match(GDGTn,colnames(raw)))]
paste(noGDGT)
paste(noGDGT,collapse = " ")
source("Data_manipulation.R")
FracA(dataM,coerce = TRUE)
FdataM<-FracA(dataM,coerce = TRUE)
source("Data_manipulation.R")
FdataM<-FracA(dataM,coerce = TRUE)
source("Indices.R")
MBT5(FdataM)
MBT6(FdataM)
fC(FdataM)
CBTp(FdataM)
source("Indices.R")
CBTp(FdataM)
source("Indices.R")
CBTp(FdataM)
source("Indices.R")
CBTp(FdataM)
source("Indices.R")
CBTp(FdataM)
source("Indices.R")
CBTp(FdataM)
source("Indices.R")
IR(FdataM)
IBT(FdataM)
source("Indices.R")
IBT(FdataM)
CI(FdataM)
TEX86(FdataM)
FdataM[342,]
BIT(FdataM)
plot(c(1:1153),BIT(FdataM))
plot(c(1:1153),BIT(FdataM),col=as.factor(dataM$Type))
summary(as.factor(dataM$Type))
dataM$Type
tail(dataM$Type)
dataM$Type[980:1153]
MI(FdataM)
RI(FdataM)
pGDGT0(FdataM)
plot(c(1:1153),pGDGT0(FdataM),col=as.factor(dataM$Type))
plot(c(1:1153),BIT(FdataM),col=as.factor(dataM$Type))
plot(c(1:1153),pGDGT0(FdataM),col=as.factor(dataM$Type))
source("Indices.R")
G2G3(FdataM)
?exists()
exists(test)
exists("test")
fa<-FdataM
colnames(fa)
vars<-c("Ia","Ib","Ic")
match(vars,colnames(fa))
is.na(match(vars,colnames(fa)))
if(is.na(match(vars,colnames(fa)))){"Missing Var"}
NA %in% is.na(match(vars,colnames(fa)))
vars<-c("Ia","Ib","Ic","test")
is.na(match(vars,colnames(fa)))
NA %in% is.na(match(vars,colnames(fa)))
NA %in% match(vars,colnames(fa))
vars<-c("Ia","Ib","Ic","test)
)
slfjkhals
;lfja;slf)
end
+
}
<-ldfhs
)zethz
vars<-c("Ia","Ib","Ic")
NA %in% match(vars,colnames(fa))
mbt<-"(fa$Ia+fa$Ib+fa$Ic)/(fa$Ia+fa$Ib+fa$Ic+fa$IIa5+fa$IIb5+fa$IIc5+fa$IIIa5)"
mbt
grep("fa$+",mbt,replacement="")
?grep
grep("fa$+",mbt)
grep("fa$+",mbt,perl = TRUE)
split(mbt,"+")
?substr
split(mbt,"/")
split(mbt,"(")
class(mbt)
strsplit(mbt,"+")
strsplit(mbt,"\+")
strsplit(mbt,"/+")
strsplit(mbt,"/"&"(")
strsplit(mbt,"/")
strsplit(strsplit(mbt,"/"),"(")
sub("fa$","",mbt)
sub(pattern = "fa$",replacement = "",mbt)
sub(pattern = "(",replacement = "",mbt)
sub(pattern = "fa$",replacement = ".",mbt)
vars
sub("I","2",vars)
mbt<-"( fa$Ia + fa$Ib + fa$Ic )/( fa$Ia + fa$Ib + fa$Ic + fa$IIa5 + fa$IIb5 + fa$IIc5 + fa$IIIa5 )"
strsplit(mbt," ")
grep(strsplit(mbt," "))
?grep
grep("fa$",strsplit(mbt," "))
grep("fa$+",perl = TRUE,strsplit(mbt," "))
grep("fa$",perl = TRUE,strsplit(mbt," "))
grep("fa$.",perl = TRUE,strsplit(mbt," "))
class(mbt)
mbt2<-strsplit(mbt," ")
mbt2
class(mbt2)
as.character(mbt2)
as.vector(mbt2)
unlist(mbt2)
grep("fa$.",perl = TRUE,unlist(strsplit(mbt," ")))
mbt2<-unlist(strsplit(mbt," "))
mbt2
class(mbt2)
grep("fa",mbt2)
mbt3<-grep("fa",mbt2)
mbt3
mbt3<-mbt2[grep("fa",mbt2)]
mbt3
sub("fa","",mbt3)
sub("fa$","",mbt3)
sub("fa\$","",mbt3)
sub("fa.","",mbt3)
mbt
eq<-mbt
sub("fa.",unlist(strsplit(eq," "))[grep("fa",unlist(strsplit(eq," ")))])
eq
unlist(strsplit(eq," "))
grep("fa",unlist(strsplit(eq," ")))
unlist(strsplit(eq," "))[grep("fa",unlist(strsplit(eq," ")))]
sub("fa.",unlist(strsplit(eq," "))[grep("fa",unlist(strsplit(eq," ")))])
sub("fa.","",unlist(strsplit(eq," "))[grep("fa",unlist(strsplit(eq," ")))])
source("Control_checks.R")
FdataM
colnames(FdataM)
FdataM<-FracA(dataM,out = "iso")
FdataM
source("Indices.R")
MBT5(FdataM)
FdataM<-FracA(dataM,out = "br")
MBT5(FdataM)
formula<-( fa$Ia + fa$Ib + fa$Ic )/( fa$Ia + fa$Ib + fa$Ic + fa$IIa5 + fa$IIb5 + fa$IIc5 + fa$IIIa5 )
formula
formula<-( Ia + Ib + Ic )/( Ia + Ib + Ic + IIa5 + IIb5 + IIc5 + IIIa5 )
formula<-"( fa$Ia + fa$Ib + fa$Ic )/( fa$Ia + fa$Ib + fa$Ic + fa$IIa5 + fa$IIb5 + fa$IIc5 + fa$IIIa5 )"
formula
as.formula(formula)
parse(test=formula)
parse(text=formula)
eval(parse(text=formula))
source("Indices.R")
MBT5(FdataM)
FdataM<-FracA(dataM,out = "iso")
MBT5(FdataM)
?unless
source("Indices.R")
FdataM<-FracA(dataM,out = "iso")
MBT5(FdataM)
FdataM<-FracA(dataM,out = "br")
MBT5(FdataM)
colnames(FdataM)
FdataM<-FdataM[,1:12]
MBT5(FdataM)
MBT5(FdataM,complete = FALSE)
eq
grep("fa",unlist(strsplit(eq," ")))
unlist(strsplit(eq," "))
colnames(fa)
unlist(strsplit(eq," "))[grep("fa",unlist(strsplit(eq," ")))]
sub("fa.","",unlist(strsplit(eq," "))[grep("fa",unlist(strsplit(eq," ")))])
match(sub("fa.","",unlist(strsplit(eq," "))[grep("fa",unlist(strsplit(eq," ")))]),colnames(fa))
colnames(FdataM)
fa<-FdataM
colnames(FdataM)
colnames(fa)
match(sub("fa.","",unlist(strsplit(eq," "))[grep("fa",unlist(strsplit(eq," ")))]),colnames(fa))
d <- c("Mon","Tues","Wednes","Thurs","Fri","Satur","Sun")
paste("day",d,"")
paste("day",d," ")
paste("day",d,"")
?sprintf
sprintf("%sday",d)
sprintf(d,"%sday")
paste0("day",d,"")
paste0("fa$",colnames(fa))
match(unlist(strsplit(eq," "))[grep("fa",unlist(strsplit(eq," ")))],paste0("fa$",colnames(fa)))
unlist(strsplit(eq," "))[grep("fa",unlist(strsplit(eq," ")))]
grep("fa",unlist(strsplit(eq," ")))
is.na(match(unlist(strsplit(eq," "))[grep("fa",unlist(strsplit(eq," ")))],paste0("fa$",colnames(fa))))
grep("fa",unlist(strsplit(eq," ")))[is.na(match(unlist(strsplit(eq," "))[grep("fa",unlist(strsplit(eq," ")))],paste0("fa$",colnames(fa))))]
grep("fa",unlist(strsplit(eq," ")))[!is.na(match(unlist(strsplit(eq," "))[grep("fa",unlist(strsplit(eq," ")))],paste0("fa$",colnames(fa))))]
colnames(fa)
colnames(fa)
eq
strsplit(eq," ")
raw
grep("fa",unlist(strsplit(eq," ")))[is.na(match(unlist(strsplit(eq," "))[grep("fa",unlist(strsplit(eq," ")))],paste0("fa$",colnames(raw))))]
eq
colnames(raw)
fa
colnames(fa)
grep("fa",unlist(strsplit(eq," ")))[is.na(match(unlist(strsplit(eq," "))[grep("fa",unlist(strsplit(eq," ")))],paste0("fa$",colnames(fa))))]
grep("fa",unlist(strsplit(eq," ")))
grep("fa",unlist(strsplit(eq," ")))[is.na(match(unlist(strsplit(eq," "))[grep("fa",unlist(strsplit(eq," ")))],paste0("fa$",colnames(fa))))]
unlist(strsplit(eq," "))
unlist(strsplit(eq," "))[grep("fa",unlist(strsplit(eq," ")))[is.na(match(unlist(strsplit(eq," "))[grep("fa",unlist(strsplit(eq," ")))],paste0("fa$",colnames(fa))))]]<-0
unlist(strsplit(eq," "))
unlist(strsplit(eq," "))[grep("fa",unlist(strsplit(eq," ")))[is.na(match(unlist(strsplit(eq," "))[grep("fa",unlist(strsplit(eq," ")))],paste0("fa$",colnames(fa))))]]
unlist(strsplit(eq," "))[grep("fa",unlist(strsplit(eq," ")))[is.na(match(unlist(strsplit(eq," "))[grep("fa",unlist(strsplit(eq," ")))],paste0("fa$",colnames(fa))))]]<-0
out<-unlist(strsplit(eq," "))
out
out[grep("fa",out)[is.na(match(out[grep("fa",out)],paste0("fa$",colnames(fa))))]]<-0
out
paste(out," ")
paste(out)
paste(out,sep=" ")
class(out)
paste(out,collapse =" ")
out<-unlist(strsplit(eq," "))
out[grep("fa",out)[is.na(match(out[grep("fa",out)],paste0("fa$",colnames(fa))))]]
paste("Removed variables:",out[grep("fa",out)[is.na(match(out[grep("fa",out)],paste0("fa$",colnames(fa))))]]))
paste("Removed variables:",out[grep("fa",out)[is.na(match(out[grep("fa",out)],paste0("fa$",colnames(fa))))]])
paste("Removed variables:",sub("fa.","",out[grep("fa",out)[is.na(match(out[grep("fa",out)],paste0("fa$",colnames(fa))))]]))
warning(paste("Removed variables:",paste(sub("fa.","",out[grep("fa",out)[is.na(match(out[grep("fa",out)],paste0("fa$",colnames(fa))))]]))))
warning(
paste(
"Removed variables:",paste(
sub("fa.","",out[grep("fa",out)[is.na(match(out[grep("fa",out)],paste0("fa$",colnames(fa))))]],sep=",")
)
)
)
warning(
paste(
"Removed variables:",paste(
sub("fa.","",out[grep("fa",out)[is.na(match(out[grep("fa",out)],paste0("fa$",colnames(fa))))]],collapse=",")
)
)
)
paste(
sub("fa.","",out[grep("fa",out)[is.na(match(out[grep("fa",out)],paste0("fa$",colnames(fa))))]],collapse=",")
)
sub("fa.","",out[grep("fa",out)[is.na(match(out[grep("fa",out)],paste0("fa$",colnames(fa))))]]
)
paste(
sub("fa.","",out[grep("fa",out)[is.na(match(out[grep("fa",out)],paste0("fa$",colnames(fa))))]]),collapse=",")
)
paste(
sub("fa.","",out[grep("fa",out)[is.na(match(out[grep("fa",out)],paste0("fa$",colnames(fa))))]]),collapse=",")
)
sub("fa.","",out[grep("fa",out)[is.na(match(out[grep("fa",out)],paste0("fa$",colnames(fa))))]])
paste(
sub("fa.","",out[grep("fa",out)[is.na(match(out[grep("fa",out)],paste0("fa$",colnames(fa))))]]),collapse=",")
paste(
"Removed variables:",paste(
sub("fa.","",out[grep("fa",out)[is.na(match(out[grep("fa",out)],paste0("fa$",colnames(fa))))]]),collapse=",")
)
warning(
paste(
"Removed variables:",paste(
sub("fa.","",out[grep("fa",out)[is.na(match(out[grep("fa",out)],paste0("fa$",colnames(fa))))]]),collapse=",")
)
)
source("Control_checks.R")
partialEq(fa,eq)
colnames(FdataM)
FdataM<-FracA(dataM,out = "br")
FdataM
MBT5(FdataM)
FdataM<-FdataM[1:12]
MBT5(FdataM)
MBT5(FdataM,complete = FALSE)
fa<-FdataM
source("Indices.R")
source("Indices.R")
MBT5(FdataM,complete = FALSE)
FdataM<-FracA(dataM,out = "iso")
MBT5(FdataM,complete = FALSE)
colnames(FdataM)
fa<-FdataM
formula<-"( fa$Ia + fa$Ib + fa$Ic )/( fa$Ia + fa$Ib + fa$Ic + fa$IIa5 + fa$IIb5 + fa$IIc5 + fa$IIIa5 )"
formula<-partialEq(fa,formula)
if(NA %in% match(correctGs(formula),colnames(fa))){stop("Missing variables")}
formula
source("Indices.R")
FdataM<-FracA(dataM)
colnames(FdataM)
CBTp(FdataM)
CBTp(FdataM,complete = FALSE)
source("Indices.R")
CBTp(FdataM)
CBTp(FdataM,complete = FALSE)
source("Indices.R")
CBTp(FdataM)
CBTp(FdataM,complete = FALSE)
colnames(FdataM)
MBT5(FdataM)
MBT6(FdataM)
fC(FdataM)
colnames(FdataM)
formula<-"(( fa$IIb5 + fa$Ib + fa$IIb6 )+2*( fa$Ic ))/(( fa$IIIa5 + fa$IIIa6 + fa$IIa5 + fa$IIa6 + fa$Ia )+( fa$IIb5 +fa$Ib + fa$IIb6 )+( fa$Ic ))*0.5"
match(correctGs(formula),colnames(fa))
correctGs(formula)
source("Indices.R")
fC(FdataM)
IR(FdataM)
formula<"( fa$IIa6 + fa$IIb6 + fa$IIIa6 )/( fa$IIa5 + fa$IIb5 + fa$IIIa5 + fa$IIa6 + fa$IIb6 + fa$IIIa6 )"
source("Indices.R")
IR(FdataM)
IBT(FdataM)
CI(FdataM)
TEX86(FdataM)
BIT(FdataM)
MI(FdataM)
RI(FdataM)
pGDGT0(FdataM)
G2G3(FdataM)
source("Indices.R")
G2G3(FdataM)
source("Indices.R")
G2G3(FdataM)
source("Indices.R")
G2G3(FdataM)
source("Indices.R")
G2G3(FdataM)
colnames(FdataM)
FdataM<FdataM[,c(1,3:4,6:8,10:16,18,19)]
FdataM<-FdataM[,c(1,3:4,6:8,10:16,18,19)]
MBT5(FdataM,complete = TRUE)
MBT5(FdataM,complete = FALSE)
fC(FdataM,complete = FALSE)
fC(FdataM,complete = TRUE)
CBTp(FdataM,complete = TRUE)
CBTp(FdataM,complete = FALSE)
CI(FdataM,complete = TRUE)
CI(FdataM,complete = FALSE)
TEX86(FdataM,complete = TRUE)
TEX86(FdataM,complete = FALSE)
G2G3(FdataM,complete = TRUE)
G2G3(FdataM,complete = FALSE)
fa
fa<-FracA(dataM,coerce = TRUE)
eq
unlist(strsplit(eq," "))
out<-unlist(strsplit(eq," "))
paste(
sub("fa.","",out[grep("fa",out)[is.na(match(out[grep("fa",out)],paste0("fa$",colnames(fa))))]]),collapse=","
)
is.na(match(out[grep("fa",out)],paste0("fa$",colnames(fa))))]]
is.na(match(out[grep("fa",out)],paste0("fa$",colnames(fa))))
if(TRUE %in% is.na(match(out[grep("fa",out)],paste0("fa$",colnames(fa))))){
warning(
paste("Removed variables:",paste(
sub("fa.","",out[grep("fa",out)[is.na(match(out[grep("fa",out)],paste0("fa$",colnames(fa))))]]),collapse=","
)
)
)
}
source("Control_checks.R")
G2G3(FdataM,complete = FALSE)
G2G3(FdataM,complete = TRUE)
source("Control_checks.R")
G2G3(FdataM,complete = FALSE)
TEX86(FdataM,complete = FALSE)
as.function(T ~ 32.42*MBT5(fa)-1.21)
?as.function
alist(a = , b = 2, a+b)
as.function(alist(a = , b = 2, a+b))
as.function(alist(a = , b = 2, a+b))(3)
as.function(alist(a = , b = 2, a+b))(1)
test<-alist(a = , b = 2, a+b)
test(3)
as.function(test)(3)
alist(MBT5=,m=32.42,b=-1.21,(MBT5*m)+b)
as.function(alist(MBT5=,m=32.42,b=-1.21,(MBT5*m)+b))(MBT5(FdataM))
MBT5(FdataM)
MBT5(FdataM,complete = FALSE)
as.function(alist(MBT5=,m=32.42,b=-1.21,(MBT5*m)+b))(MBT5(FdataM,complete = FALSE))
list(Russell=AfricaRussellMAAT)
AfricaRussellMAAT<-alist(MBT5=,m=32.42,b=-1.21,(MBT5*m)+b)
list(Russell=AfricaRussellMAAT)
Temperature<-list(Russell=AfricaRussellMAAT)
Temperature
Calibrations<-list(Temperature=Temperature)
Calibrations
AfricaRussellpH<-alist(CBTp=,m=2.65,b=8.95)
pH<-list(Russell=AfricaRussellpH)
Calibrations<-list(Temperature=Temperature,pH=pH)
Calibrations
Calibrations[1]
Calibrations[[1]]
Calibrations[["Russell"]]
Calibrations["Temperature"]
Calibrations["Temperature"]["Russell"]
Calibrations["Temperature"][1]
Calibrations["Temperature"][["Russell"]]
Calibrations$Temperature$Russell
a<-"Temperature"
b<-"Russell"
Calibrations$a$b
Calibrations[[a]][[b]]
source("Calibrations.R")
dataM
linearCalib(dataM,"Temperature","Russell")
source("Calibrations.R")
linearCalib(dataM,"Temperature","Russell")
source("Calibrations.R")
linearCalib(dataM,"Temperature","Russell")
source("Calibrations.R")
linearCalib(dataM,"Temperature","DeJonge")
linearCalib(dataM,"Temperature","Dejon")
linearCalib(dataM,"Temperature","DeJonge")
Rus<-linearCalib(dataM,"Temperature","Russell")
Mart<-linearCalib(dataM,"Temperature","Martinez")
De<-linearCalib(dataM,"Temperature","DeJonge")
max(De)
min(De)
max(Mart)
min(Mart)
min(Rus)
max(Rus)
plot(MBT5(FracA(dataM)),Mart)
points(FracA(dataM)),Rus,col="red")
points(FracA(dataM),Rus,col="red")
dim(Rus)
Rus
length(Rus)
points(MBT5(FracA(dataM)),Rus,col="red")
points(MBT5(FracA(dataM)),De,col="blue")
source("Data_manipulation.R")
source("Control_checks.R")
source("Indices.R")
source("Calibrations.R")
linearCalib(dataM,"Temperature","DeJonge")
linearCalib(dataM,"pH","DeJonge")
source("Calibrations.R")
source("Calibrations.R")
linearCalib(dataM,"pH","DeJonge")
linearCalib(dataM,"pH","DeJonge",complete=FALSE)
source("Calibrations.R")
linearCalib(dataM,"pH","DeJonge")
linearCalib(dataM,"pH","DeJonge",complete=FALSE)
source("bayRmbt_predict.R")
bayrmbt_predict(dataM,10,10,"T0","lake")
colnames(dataM)
dummy<-dataM[,1:27]
colnames(dummy)
bayrmbt_predict(dummy,10,10,"T0","lake")
bayrmbt_predict(dummy,10,10,"T0","lake",complete = FALSE)
source("bayRmbt_predict.R")
bayrmbt_predict(dummy,10,10,"T0","lake",complete = FALSE)
bayrmbt_predict(dummy,10,10,"T0","lake")
lakeData<-read.csv(file('BasinPondMiller.csv'),head=TRUE,sep=',')
lakeData
mbt5me<-lakeData$MBT5Me
bayrmbt_predict(mbt5me,10,10,Tmodel = "T0",Type = "lake",data="mbt5")
bayrmbt_predict(mbt5me,10,10,Tmodel = "T0",Type = "lake")
bayrmbt_predict(lakeData,10,10,Tmodel = "T0",Type = "lake",data="fa")
setwd("C:/Users/marto/OneDrive/Documents/GitHub/ComoUnGDGT")
rm(list
= ls())
install.packages(‘devtools’)
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
library(devtools)
