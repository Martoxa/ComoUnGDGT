rm(soil)
a<-seq(from=0,to=1,by=0.1)
a
sed<-0.9
soil<-0.8
soil<-0.91
library(factoextra)
?fviz_cluster
library(ChemmineR)
data(sdfsample)
sdfset <- sdfsample
sdfset
sdfset[1:4]
sdfset[[1]]
view(sdfset[1:4])
sdfset <- read.SDFset("http://faculty.ucr.edu/~tgirke/Documents/R_BioCond/Samples/sdfsample.sdf")
header(sdfset[1:4])
header(sdfset[[1]])
atomblock(sdfset[1:4])
bondblock(sdfset[1:4])
datablock(sdfset[1:4])
cid(sdfset)[1:4]
sdfid(sdfset)[1:4]
unique_ids <- makeUnique(sdfid(sdfset))
cid(sdfset) <- unique_ids
blockmatrix <- datablock2ma(datablocklist=datablock(sdfset)) # Converts data block to matrix
numchar <- splitNumChar(blockmatrix=blockmatrix) # Splits to numeric and character matrix
numchar[[1]][1:2,1:2]
numchar[[2]][1:2,10:11]
propma <- data.frame(MF=MF(sdfset), MW=MW(sdfset), atomcountMA(sdfset))
propma[1:4, ]
datablock(sdfset) <- propma
datablock(sdfset[1])
grepSDFset("650001", sdfset, field="datablock", mode="subset")
grepSDFset("650001", sdfset, field="datablock", mode="index")
write.SDF(sdfset[1:4], file="sub.sdf", sig=TRUE)
plot(sdfset[1:4], print=FALSE)
sdf.visualize(sdfset[1:4])
apset <- sdf2ap(sdfset)
apset
data(apset) # Load sample apset data provided by library.
cmp.search(apset, apset[1], type=3, cutoff = 0.3, quiet=TRUE)
library(ChemmineR)
library(ChemmineR)
library(baseline)
install.packages("MSeasy")
library(flux)
install.packages("MSeasy")
data(sdfsample)
sdfsample
summary(sdfsample)
sdfsample[[1]]
class(sdfsample)
?nes()
?new()
data(sdfsample); sdfset <- sdfsample
(sdf <- sdfset[[1]])
header(sdf)
atomblock(sdf)
plot(sdf)
c(7:20,200)
fresh<-c(2.78,2.20,1.76)
sea<-c(2.47,1.67,1.81)
t.test(fresh,sea)
freshIC<-c(2.71,2.68,2.93)
seaIC<-c(3.44,3.56,3.46)
t.test(freshIC,seaIC)
freshTC<-c(5.49,4.88,4.69)
seaTC<-c(5.91,5.23,5.27)
t.test(freshTC,seaTC)
library(ChemmineR)
vignette("ChemmineR")
?smiles2sdf
data(smisample)
smisample
summary(smisample)
smisample[[1]]
View(smisample)
smisample[1]
smisample[2]
smisample[[1]]
smisample[[2]]
class(smisample)
data(smisample); smiset <- smisample
smiset; view(smiset[1:4])
?read.SMIset
head(smisample)
cid(smiset[1:4])
(smivec <- as.character(smiset[1:4]))
smivec
smivec[1]
as(smivec, "SMIset")
test<-c("C(C1=CC=CC=C1)=O","C(C)(=O)C1=CC=CC=C1","C(CCCCCCC\C=C\CCCCCCCC)(=O)O")
test<-c("C(C1=CC=CC=C1)=O","C(C)(=O)C1=CC=CC=C1"
)
)
test<-c("C(C1=CC=CC=C1)=O","C(C)(=O)C1=CC=CC=C1")
test
names(test)<-c("100-52-7","98-86-2")
test
as(test,"SMIset")
SMILEtest<-as(test,"SMIset")
SMILEtest
SMILEtest[[1]]
?smiles2sdf()
smiles2sdf(SMILEtest)
install.packages("ChemmineOB")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version='devel')
BiocManager::install(version='3.16')
BiocManager::install("ChemmineOB")
smiles2sdf(SMILEtest)
sdftest<-smiles2sdf(SMILEtest)
summary(sdftest)
vignette("ChemmineR")
validSDF(sdftest)
sdfTstr <- as(sdftest, "SDFstr")
sdfTstr
sdftest[[1]]
plot(sdftest,print=FALSE)
df <- data.frame(x = 1:10, y = rnorm(10))
# set the size of the plot in centimeters
options(repr.plot.width = 10, repr.plot.height = 6)
# create the plot with ggplot2
ggplot(df, aes(x = x, y = y)) +
geom_point() +
theme(
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black", size = 1),
axis.ticks = element_line(colour = "black", size = 1),
axis.text = element_text(colour = "black", size = 12),
axis.title = element_text(colour = "black", size = 14),
plot.margin = unit(c(1, 1, 1, 1), "cm")
) +
scale_x_continuous(limits = c(1, 10), expand = c(0, 0))
library(ggplot2)
df <- data.frame(x = 1:10, y = rnorm(10))
# set the size of the plot in centimeters
options(repr.plot.width = 10, repr.plot.height = 6)
# create the plot with ggplot2
ggplot(df, aes(x = x, y = y)) +
geom_point() +
theme(
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black", size = 1),
axis.ticks = element_line(colour = "black", size = 1),
axis.text = element_text(colour = "black", size = 12),
axis.title = element_text(colour = "black", size = 14),
plot.margin = unit(c(1, 1, 1, 1), "cm")
) +
scale_x_continuous(limits = c(1, 10), expand = c(0, 0))
?repr.plot.width
?options
df <- data.frame(x = 1:10, y = rnorm(10))
# set the size of the plot in centimeters
options(repr.plot.width = 1, repr.plot.height = 1)
# create the plot with ggplot2
ggplot(df, aes(x = x, y = y)) +
geom_point() +
theme(
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black", size = 1),
axis.ticks = element_line(colour = "black", size = 1),
axis.text = element_text(colour = "black", size = 12),
axis.title = element_text(colour = "black", size = 14),
plot.margin = unit(c(1, 1, 1, 1), "cm")
) +
scale_x_continuous(limits = c(1, 10), expand = c(0, 0))
1/3
a<-1/3
a/(1-a)
a<-.8
a/(1-a)
1-.8
0.33/(1-.33)
(0.08/(1-0.08))-(0.33/(1-.33))
library(devtools)
install_github("IRkernel/IRkernel")
IRkernel::installspec()
library(IRkernel)
installspec()
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
data("iris")
iris<-data("iris")
iris
iris
iris3
iris
data("iris")
iris
dim(iris)
Full<-iris
runif(100,min = 1,max = 150)
?runif
round(runif(100,min = 1,max = 150),0)
summary(as.factor(round(runif(100,min = 1,max = 150),0)))
sample(1:150,100,replace = FALSE)
Iris1<-iris[sample(1:150,100,replace = FALSE),]
set.seed(123)
Iris1<-iris[sample(1:150,100,replace = FALSE),]
sample(1:150,100,replace = FALSE)
sample(1:150,100,replace = FALSE)
set.seed(123)
sample(1:150,100,replace = FALSE)
set.seed(123)
sample(1:150,100,replace = FALSE)
set.seed(123)
iris[sample(1:150,100,replace = FALSE),]
iris[!sample(1:150,100,replace = FALSE),]
iris-sample(1:150,100,replace = FALSE),]
iris[-sample(1:150,100,replace = FALSE),]
set.seed(123)
Iris2<-iris[-sample(1:150,100,replace = FALSE),]
pcaFull<-prcomp(Full[,1:4])
pca1<-prcomp(Iris1[,1:4])
library(factoextra)
library(ggplot2)
fviz_pca_biplot(pcaFull)
fviz_pca_biplot(pcaFull,col.ind = Full$Species)
fviz_pca_biplot(pca1,col.ind = Iris1$Species)
fviz_pca_biplot(pcaFull,col.ind = Full$Species)
fviz_pca_biplot(pca1,col.ind = Iris1$Species)
project<-predict(pca1,data=Iris2[,1:4])
project<-predict(pca1,Iris2[,1:4])
project
fviz_pca_biplot(pca1,col.ind = Iris1$Species)+geom_point(project,aes(x=PC1,y=PC2),size=5)
fviz_pca_biplot(pca1,col.ind = Iris1$Species)+geom_point(project,aes(x=PC1,y=PC2))
fviz_pca_biplot(pca1,col.ind = Iris1$Species)+geom_point(project)
fviz_pca_biplot(pca1,col.ind = Iris1$Species)
fviz_pca_biplot(project,col.ind = Iris2$Species)
pca1$x
plot(pca1$x[1],pca1$x[2])
pca1$x[,1]
plot(pca1$x[,1],pca1$x[,2])
plot(pca1$x[,1],pca1$x[,2],col=as.factor(Iris1$Species))
points(project[,1],project[,2],col="red")
fviz_pca_biplot(pcaFull,col.ind = Full$Species)
plot(pca1$x[,1],pca1$x[,2],col=as.factor(Iris1$Species))
points(project[,1],project[,2],col="red")
fviz_pca_biplot(pcaFull,col.ind = Full$Species)
list(brGDGTs=list("IIIa5","IIIa6","IIIb5","IIIb6","IIIc5","IIIc6","IIa5","IIa6","IIb5","IIb6","IIc5","IIc6","Ia","Ib","Ic"),isoGDGTs=c("GDGT0","GDGT1","GDGT2","GDGT3","Crena","Crenp"))
list(brGDGTs=list("IIIa5","IIIa6","IIIb5","IIIb6","IIIc5","IIIc6","IIa5","IIa6","IIb5","IIb6","IIc5","IIc6","Ia","Ib","Ic"),isoGDGTs=list("GDGT0","GDGT1","GDGT2","GDGT3","Crena","Crenp"))
GDGTs<-list(brGDGTs=list("IIIa5","IIIa6","IIIb5","IIIb6","IIIc5","IIIc6","IIa5","IIa6","IIb5","IIb6","IIc5","IIc6","Ia","Ib","Ic"),isoGDGTs=list("GDGT0","GDGT1","GDGT2","GDGT3","Crena","Crenp"))
GDGTs
inlist(GDGTs)
unlist(GDGTs)
GDGTs<-list(isoGDGTs=list("GDGT0","GDGT1","GDGT2","GDGT3","Crena","Crenp"),brGDGTs=list("IIIa5","IIIa6","IIIb5","IIIb6","IIIc5","IIIc6","IIa5","IIa6","IIb5","IIb6","IIc5","IIc6","Ia","Ib","Ic"))
unlist(GDGTs)
setwd("C:/Users/Marti150/OneDrive - Universiteit Utrecht/Documents/GitHub/ComoUnGDGT")
?rnorm
rnorm(10,0,1)
lon<--17.6635
lat<-9.1660
source("RrthChordDistances.R")
Nsamps<-varargin
varargin=1000
Nsamps<-varargin
ens_sel<-0
Params<-readRDS(file="SST_param_std.rds")
Obs<-readRDS(file = "obsSST.rds")
grid_half_space<-10
min_num<-1
max_dist<-500
ind_s<-round(seq(1,length(Params$tau2.samples),length.out=Nsamps))
alpha_samples_comp<-Params$alpha.samples.comp[,ind_s]
beta_samples_comp<-Params$beta.samples.comp[,ind_s]
tau2_samples<-Params$tau2.samples[ind_s]
Nd<-2
dists_prior<-EarthChordDistances(Output_SiteLoc,Obs$locs.st.obs)
Output_SiteLoc<-as.matrix(cbind(lon,lat))
dists_prior<-EarthChordDistances(Output_SiteLoc,Obs$locs.st.obs)
sorted_dists_prior<-if(length(lon)==1){sort(dists_prior)} else if(length(lon)>1){apply(dists_prior,2,sort)}
inds_dists_prior<-if(length(lon)==1){match(sorted_dists_prior,dists_prior)} else if(length(lon)>1){which(sorted_dists_prior==dists_prior,arr.ind = TRUE)[,1]}
num_below_dist<-which(sorted_dists_prior == tail(c(sorted_dists_prior)[c(sorted_dists_prior)<max_dist],n=1),arr.ind = FALSE)
num_below_dist
if(num_below_dist>min_num){prior_mean<-mean(Obs$st.obs.ave.vec[inds_dists_prior[seq(from=1,to=num_below_dist,by=1)]])
} else {prior_mean<-mean(Obs$st.obs.ave.vec[inds_dists_prior[seq(from=1,to=min_num,by=1)]])}
inder_g<- which(abs(Params$Locs.Comp[,1]-lon)<=grid_half_space & abs(Params$Locs.Comp[,2]-lat)<= grid_half_space)
alpha_samples_comp<-as.data.frame(Params$alpha.samples.comp)[inder_g,]
beta_samples_comp<-as.data.frame(Params$beta.samples.comp)[inder_g,]
inder_g
pmu<-kronecker(matrix(1,1,Nsamps),matrix(1,Nd,1)*prior_mean)
pinv_cov<-kronecker(matrix(1,Nd,Nsamps),prior_std)^2
prior_std<-6
pmu<-kronecker(matrix(1,1,Nsamps),matrix(1,Nd,1)*prior_mean)
pinv_cov<-kronecker(matrix(1,Nd,Nsamps),prior_std)^2
sigmaS<-sqrt(tau2_samples)
pmu
pmu[2,1000]
pinv_cov
kronecker(matrix(1,Nd,Nsamps),prior_std)^(-2)
pinv_cov<-kronecker(matrix(1,Nd,Nsamps),prior_std)^(-2)
sigmaS<-sqrt(tau2_samples)
sigmaS
post_mean_num<-pinv_cov*pmu + kronecker(matrix(1,Nd,1),sigmaS)^(-2)*kronecker(matrix(1,Nd,1),beta_samples_comp)*(dats- kronecker(matrix(1,Nd,1),alpha_samples_comp))
pinv_cov*pmu
kronecker(matrix(1,Nd,1),sigmaS)^(-2)
dats<-c(0.5658,0.6086)
(dats- kronecker(matrix(1,Nd,1),alpha_samples_comp))
kronecker(matrix(1,Nd,1),alpha_samples_comp)
alpha_samples_comp)
alpha_samples_comp
as.data.frame(Params$alpha.samples.comp)[inder_g,]
as.data.frame(Params$alpha.samples.comp)[inder_g,1]
class(alpha_samples_comp)
kronecker(matrix(1,Nd,1),as.matrix(alpha_samples_comp))
dats- kronecker(matrix(1,Nd,1),as.matrix(alpha_samples_comp))
test<-dats- kronecker(matrix(1,Nd,1),as.matrix(alpha_samples_comp))
test[1,1]
dim(test)
kronecker(matrix(1,Nd,1),beta_samples_comp)
kronecker(matrix(1,Nd,1),as.matrix(beta_samples_comp))
test<-kronecker(matrix(1,Nd,1),as.matrix(beta_samples_comp))
dim(test)
dim(as.matrix(beta_samples_comp))
post_mean+matrix(rnorm(Nd*Nsamps,0,1),nrow = Nd,ncol=Nsamps)*post_sig
source("~/GitHub/ComoUnGDGT/bayspar_tex.R", echo=TRUE)
post_mean_num<-pinv_cov*pmu + kronecker(matrix(1,Nd,1),sigmaS)^(-2)*kronecker(matrix(1,Nd,1),as.matrix(beta_samples_comp))*(dats- kronecker(matrix(1,Nd,1),as.matrix(alpha_samples_comp)))
pinv_cov*pmu
kronecker(matrix(1,Nd,1),sigmaS)^(-2)
kronecker(matrix(1,Nd,1),as.matrix(beta_samples_comp))
dim(kronecker(matrix(1,Nd,1),as.matrix(beta_samples_comp)))
dim(kronecker(matrix(1,Nd,1),sigmaS)^(-2))
dim((dats- kronecker(matrix(1,Nd,1),as.matrix(alpha_samples_comp))))
class((dats- kronecker(matrix(1,Nd,1),as.matrix(alpha_samples_comp))))
class(kronecker(matrix(1,Nd,1),sigmaS)^(-2))
class(kronecker(matrix(1,Nd,1),as.matrix(beta_samples_comp)))
kronecker(matrix(1,Nd,1),sigmaS)^(-2)*kronecker(matrix(1,Nd,1),as.matrix(beta_samples_comp))*(dats- kronecker(matrix(1,Nd,1),as.matrix(alpha_samples_comp))
)
source("RrthChordDistances.R")
dats<-c(0.6018,0.6065)
lon<--17.6635
lat<-9.1660
prior_std<-6
runname<-"SST"
varargin<-1000
Nsamps<-varargin
ens_sel<-0
if(runname=="SST"){
Params<-readRDS(file="SST_param_std.rds")
Obs<-readRDS(file = "obsSST.rds")
} else if(runname=="subT"){
Params<-readRDS(file="SubT_param_std.rds")
Obs<-readRDS(file = "obssubT.rds")
}
grid_half_space<-10
min_num<-1
max_dist<-500
ind_s<-round(seq(1,length(Params$tau2.samples),length.out=Nsamps))
alpha_samples_comp<-Params$alpha.samples.comp[,ind_s]
beta_samples_comp<-Params$beta.samples.comp[,ind_s]
tau2_samples<-Params$tau2.samples[ind_s]
Nd<-length(dats)
Nd
Output_SiteLoc<-as.matrix(cbind(lon,lat))
dists_prior<-EarthChordDistances(Output_SiteLoc,Obs$locs.st.obs)
sorted_dists_prior<-if(length(lon)==1){sort(dists_prior)} else if(length(lon)>1){apply(dists_prior,2,sort)}
inds_dists_prior<-if(length(lon)==1){match(sorted_dists_prior,dists_prior)} else if(length(lon)>1){which(sorted_dists_prior==dists_prior,arr.ind = TRUE)[,1]}
num_below_dist<-which(sorted_dists_prior == tail(c(sorted_dists_prior)[c(sorted_dists_prior)<max_dist],n=1),arr.ind = FALSE)
num_below_dist
if(num_below_dist>min_num){prior_mean<-mean(Obs$st.obs.ave.vec[inds_dists_prior[seq(from=1,to=num_below_dist,by=1)]])
} else {prior_mean<-mean(Obs$st.obs.ave.vec[inds_dists_prior[seq(from=1,to=min_num,by=1)]])}
prior_mean
dim(Params$alpha.samples.comp)
dim(alpha_samples_comp)
inder_g<- which(abs(Params$Locs.Comp[,1]-lon)<=grid_half_space & abs(Params$Locs.Comp[,2]-lat)<= grid_half_space)
alpha_samples_comp<-as.data.frame(alpha_samples_comp)[inder_g,]
beta_samples_comp<-as.data.frame(beta_samples_comp)[inder_g,]
Output_GridLoc<-Params$Locs.Comp[inder_g,]
dim(alpha_samples_comp)
pmu<-kronecker(matrix(1,1,Nsamps),matrix(1,Nd,1)*prior_mean)
pinv_cov<-kronecker(matrix(1,Nd,Nsamps),prior_std)^(-2)
sigmaS<-sqrt(tau2_samples)
pinv_cov*pmu + kronecker(matrix(1,Nd,1),sigmaS)^(-2)*kronecker(matrix(1,Nd,1),as.matrix(beta_samples_comp))*(dats- kronecker(matrix(1,Nd,1),as.matrix(alpha_samples_comp)))
dim(pinv_cov*pmu)
dim(kronecker(matrix(1,Nd,1),sigmaS)^(-2))
dim(kronecker(matrix(1,1,Nd),sigmaS)^(-2))
kronecker(matrix(1,1,Nd),sigmaS)^(-2)
dim(sigmaS)
length(sigmaS)
length(as.matrix(sigmaS))
dim(as.matrix(sigmaS))
dim(t(as.matrix(sigmaS)))
dim(t(sigmaS))
dim(kronecker(matrix(1,1,Nd),t(sigmaS))^(-2))
dim(kronecker(matrix(1,Nd,1),t(sigmaS))^(-2))
dim(kronecker(matrix(1,Nd,1),as.matrix(beta_samples_comp)))
dim((dats- kronecker(matrix(1,Nd,1),as.matrix(alpha_samples_comp))))
kronecker(matrix(1,Nd,1),t(sigmaS))^(-2)*kronecker(matrix(1,Nd,1),as.matrix(beta_samples_comp))*(dats- kronecker(matrix(1,Nd,1),as.matrix(alpha_samples_comp)))
dim(kronecker(matrix(1,Nd,1),t(sigmaS))^(-2)*kronecker(matrix(1,Nd,1),as.matrix(beta_samples_comp))*(dats- kronecker(matrix(1,Nd,1),as.matrix(alpha_samples_comp))))
post_mean_num<-pinv_cov*pmu + kronecker(matrix(1,Nd,1),t(sigmaS))^(-2)*kronecker(matrix(1,Nd,1),as.matrix(beta_samples_comp))*(dats- kronecker(matrix(1,Nd,1),as.matrix(alpha_samples_comp)))
dim(post_mean_num)
post_mean_num[1,1]
post_mean_num[2,1000]
pinv_cov+kronecker(matrix(1,Nd,1),as.matrix(beta_samples_comp))^2 * kronecker(matrix(1,Nd,1),t(sigmaS))^(-2)
post_mean_den<-pinv_cov+kronecker(matrix(1,Nd,1),as.matrix(beta_samples_comp))^2 * kronecker(matrix(1,Nd,1),t(sigmaS))^(-2)
dim(post_mean_den)
post_mean<-post_mean_num / post_mean_den
post_sig<-sqrt(post_mean_den^(-1))
post_mean+matrix(rnorm(Nd*Nsamps,0,1),nrow = Nd,ncol=Nsamps)*post_sig
Preds<-post_mean+matrix(rnorm(Nd*Nsamps,0,1),nrow = Nd,ncol=Nsamps)*post_sig
Preds[1,1]
Preds[2,1000]
?sort
apply(Preds,2,sort)
test<-apply(Preds,2,sort)
test[,1]
test[,100]
test[,1000]
test[,500]
?quartiles
?quantile
apply(apply(Preds,2,sort),2,quantile,probs=c(0.05,0.5,0.95))
dim(apply(apply(Preds,2,sort),2,quantile,probs=c(0.05,0.5,0.95)))
test<-apply(apply(Preds,2,sort),2,quantile,probs=c(0.05,0.5,0.95))
test[,1]
dim(apply(apply(Preds,2,sort),1,quantile,probs=c(0.05,0.5,0.95)))
apply(apply(Preds,2,sort),1,quantile,probs=c(0.05,0.5,0.95))
dim(apply(Preds,2,sort))
t(apply(apply(Preds,2,sort),1,quantile,probs=c(0.05,0.5,0.95)))
dim(Output_Preds)
Output_Preds<-matrix(NaN,nrow=Nd,ncol=3)
Output_SiteLoc<-as.matrix(cbind(lon,lat))
Output_GridLoc<-matrix(NaN,nrow = 2,ncol=1)
Output_PriorMean<-matrix(NaN,nrow = 1,ncol=1)
Output_PriorStd<-prior_std
dim(Output_Preds)
dim(t(apply(apply(Preds,2,sort),1,quantile,probs=c(0.05,0.5,0.95))))
dim(Output_GridLoc)
dim(Params$Locs.Comp[inder_g,])
length(Params$Locs.Comp[inder_g,])
Params$Locs.Comp[inder_g,]
Output_GridLoc<-Params$Locs.Comp[inder_g,]
Output_GridLoc
dim(Output_PriorMean)
source("RrthChordDistances.R")
source("bayspar_tex.R")
library(R.matlab)
setwd("C:/Users/Marti150/OneDrive - Universiteit Utrecht/Documents/GitHub/BAYSPAR")
setwd("C:/Users/Marti150/OneDrive - Universiteit Utrecht/Documents/GitHub/BAYSPAR/ModelOutput")
data<-readMat("tex_testdata.mat")
stuct_tp<-data$lopes.santos2010
stuct_tp
stuct_tp$tex86
stuct_tp[4,1]
stuct_tp[4]
dats<-stuct_tp[4]
lon<-stuct_tp[2]
lat<-stuct_tp[1]
lat
as.vector(lat)
unlist(stuct_tp)
unlist(lon)
lon<-unlist(lon)
lat<-unlist(lat)
dats<-unlist(dats)
prior_std<-6
runname<-"subT"
Output<-bayspar_tex(dats,lon,lat,prior_std,runname)
setwd("C:/Users/Marti150/OneDrive - Universiteit Utrecht/Documents/GitHub/ComoUnGDGT")
Output<-bayspar_tex(dats,lon,lat,prior_std,runname)
Output$GridLoc
Output$PriorMean
Output$PriorStd
Output$SiteLoc
Output$Predictions
Preds
Output$Predictions
Output<-bayspar_tex(dats,lon,lat,prior_std,runname,c(1000,1))
Output$Ensemble
dim(Output$Ensemble)
Output$Ensemble[1,]
sort(Output$Ensemble[1,])
quantile(sort(Output$Ensemble[1,]),probs = c(0.05,0.5,0.95))
Output$Predictions[1,]
dats[1]
datsT<-dats[1]
Output<-bayspar_tex(datsT,lon,lat,prior_std,runname,c(1000,1))
source("bayspar_tex.R")
Output<-bayspar_tex(datsT,lon,lat,prior_std,runname,c(1000,1))
Output$Predictions
datsT<-dats[1:3]
Output<-bayspar_tex(datsT,lon,lat,prior_std,runname,c(1000,1))
Output$Predictions
source("bayspar_tex.R")
Output<-bayspar_tex(datsT,lon,lat,prior_std,runname,c(1000,1))
Output$Predictions
datsT<-dats[2]
Output<-bayspar_tex(datsT,lon,lat,prior_std,runname,c(1000,1))
Output$Predictions
Output<-bayspar_tex(datsT,lon,lat,prior_std,runname,c(1000,1))
Output$Predictions
Output<-bayspar_tex(dats,lon,lat,prior_std,runname,c(1000,1))
Output$Predictions
source("bayspar_tex.R")
Output<-bayspar_tex(dats,lon,lat,prior_std,runname,c(1000,1))
Output$Predictions
source("bayspar_tex.R")
Output<-bayspar_tex(dats,lon,lat,prior_std,runname,c(1000,1))
Output$Predictions
source("RthChordDistances.R")
source("bayspR_tex.R")
Output<-bayspR_tex(dats,lon,lat,prior_std,runname,c(1000,1))
Output$Predictions
