prcomp(USArrests)
library(factoextra)
USpca<-prcomp(USArrests)
get_pca_var(USpca)
getUS<-get_pca_var(USpca)
getUS$contrib
class(getUS$contrib)
USw<-as.data.frame(getUS$contrib)
USw
class(USw)
ggplot(USw,aes(x=USw[,1],y=Dim.1))
colnames(USw)
ggplot(USw,aes(x=rownames(USw),y=Dim.1))
ggplot(USw,aes(x=rownames(USw),y=Dim.1))+geom_segment(aes(x=rownames(USw),xend=rownames(USw),y=0,yend=Dim.1))
ggplot(USw,aes(x=rownames(USw),y=Dim.1))+geom_segment(aes(x=rownames(USw),xend=rownames(USw),y=0,yend=Dim.1))+geom_point(size=3,color="red")
library(factoextra)
USpca<-prcomp(USArrests)
getUS<-get_pca_var(USpca)
USweight<-as.data.frame(getUS$contrib)
ggplot(USweight,aes(x=rownames(USweight),y=Dim.1))+geom_segment(aes(x=rownames(USweight),xend=rownames(USweight),y=0,yend=Dim.1))+geom_point(size=3,colour="red")+ylim(0,100)+theme(axis.text.x=element_text(angle=0,size=12),axis.text.y=element_text(size=12),axis.title=element_text(size=12),panel.border=element_rect(size=1,fill=NA))
ipca<-prcomp(iris)
iris
prcomp(iris[,1:4])
ipca<-prcomp(iris[,1:4])
get_pca_var(ipca)
geti<-get_pca_var(ipca)
iweight<-as.data.frame(geti$contrib)
iweight
ipca<-prcomp(iris[,1:4])
geti<-get_pca_var(ipca)
iweight<-as.data.frame(geti$contrib)
ggplot(iweight,aes(x=rownames(iweight),y=Dim.1))+geom_segment(aes(x=rownames(iweight),xend=rownames(iweight),y=0,yend=Dim.1))+geom_point(size=3,colour="red")+ylim(0,100)+theme(axis.text.x=element_text(angle=0,size=12),axis.text.y=element_text(size=12),axis.title=element_text(size=12),panel.border=element_rect(size=1,fill=NA))
fviz_pca_biplot(ipca)
ipca<-prcomp(iris[,1:4])
geti<-get_pca_var(ipca)
iweight<-as.data.frame(geti$contrib)
ggplot(iweight,aes(x=rownames(iweight),y=Dim.1))+geom_segment(aes(x=rownames(iweight),xend=rownames(iweight),y=0,yend=Dim.1))+geom_point(size=3,colour="red")+ylim(0,100)+theme(axis.text.x=element_text(angle=0,size=12),axis.text.y=element_text(size=12),axis.title=element_text(size=12),panel.border=element_rect(size=1,fill=NA))
ggplot(iweight,aes(x=rownames(iweight),y=Dim.1))+geom_segment(aes(x=rownames(iweight),xend=rownames(iweight),y=0,yend=Dim.1))+geom_point(size=3,colour="red")+ylim(-10,750)+theme(axis.text.x=element_text(angle=0,size=12),axis.text.y=element_text(size=12),axis.title=element_text(size=12),panel.border=element_rect(size=1,fill=NA))
ggplot(iweight,aes(x=rownames(iweight),y=Dim.1))+geom_segment(aes(x=rownames(iweight),xend=rownames(iweight),y=0,yend=Dim.1))+geom_point(size=3,colour="red")+ylim(-10,75)+theme(axis.text.x=element_text(angle=0,size=12),axis.text.y=element_text(size=12),axis.title=element_text(size=12),panel.border=element_rect(size=1,fill=NA))
install.packages("MixSIAR")
library(MixSIAR)
library(MixSIAR)
install.packages("gWidgets","RGtk2","gWidgetsRGtk2","devtools")
install.packages("MixSIAR")
library(MixSIAR)
install.packagesc(("gWidgets","RGtk2","gWidgetsRGtk2","devtools"))
install.packages(c("gWidgets","RGtk2","gWidgetsRGtk2","devtools"))
install.packages(c("gWidgets","RGtk2","gWidgetsRGtk2"))
install.packages("RGtk2")
library(devtools)
devtools::install_github("brianstock/MixSIAR",dependencies = TRUE,build_vignettes = TRUE)
install.packages("Rtools")
library(devtools)
devtools::install_github("brianstock/MixSIAR",dependencies = TRUE,build_vignettes = TRUE)
library(MixSIAR)
mixsiar_gui()
find.package("MixSIAR")
library(MixSIAR)
mixiar.dir<-find.package("MixSIAR")
paste0(mixsiar.dir,"/example_scripts")
paste0(mixsiar.dir,"/example_scripts")
paste0(mixsiar.dir,"/example_scripts")
paste0(mixiar.dir,"/example_scripts")
?load_mix_data
mix.filename<-system.file("extdata","cladocera_consumer.csv",package = "MixSIAR")
mix<-load_mix_data(filename = mix.filename,iso_names = c("c14.0","c16.0","c16.1w9","c16.1w7","c16.2w4","c16.3w3","c16.4w3","c17.0","c18.0","c18.1w9","c18.1w7","c18.2w6","c18.3w6","c18.3w3","c18.4w3","c18.5w3","c20.0","c22.0","c20.4w6","c20.5w3","c22.6w3","BrFA"),factors="id",fac_random=FALSE,fac_nested=FALSE,cont_effects = NULL)
mix
source.filename<-system.file("extdata","cladocera_sources.csv",package = "MixSIAR")
source<-load_source_data(filename = source.filename,source_factors = NULL,conc_dep = FALSE,data_type = "means",mix)
source
discr.filename <- system.file("extdata", "cladocera_discrimination.csv", package = "MixSIAR")
discr <- load_discr_data(filename=discr.filename, mix)
plot_prior(alpha.prior = 1,source)
model_filename <- "MixSIAR_model.txt"
resid_err <- FALSE
process_err <- TRUE
write_JAGS_model(model_filename, resid_err, process_err, mix, source)
jags.1 <- run_model(run="test", mix, source, discr, model_filename)
jags.1 <- run_model(run="normal", mix, source, discr, model_filename)
output_JAGS(jags.1, mix, source, output_options)
?output_JAGS
output_JAGS(jags.1, mix, source)
discr
?load_discr_data
?load_source_data
source
foc<-0.15
sed<-seq(from=0.1, to = 100, by=0.1)
T<-c(1:48)
LogDOC<-0.4*log(foc*sed)+0.2*log(T)+1.52
LogDOC<-(0.4*log(foc*sed))+(0.2*log(T))+1.52
foc*sed
log(foc*sed)
0.4*log(foc*sed)
T<-48
LogDOC<-(0.4*log(foc*sed))+(0.2*log(T))+1.52
plot(sed,LogDOC)
plot(sed,10^(LogDOC))
sed
plot(sed,LogDOC)
abline(a=1)
abline(v=1)
plot(sed,10^(LogDOC))
abline(v=1)
Vt<-1
Va<-Vt-Vs
Vs<-seq(from=0,to=1,by=0.1)
Va<-Vt-Vs
rm(Va)
Sd<-15
Sa<-35
Va<-Vt-Vs
rm(Sd)
Ss<-5
Sf<-(Sa*Va)*(Ss*Vs)
plot(Va,Sf)
Va
Sf<-(Sa*Va)+(Ss*Vs)
plot(Va,Sf)
abline(v=5)
abline(h=5)
abline(h=18)
Ss<-15
Sf<-(Sa*Va)+(Ss*Vs)
plot(Va,Sf)
abline(h=18)
abline(h=30)
Ss<-35
Sa<-0
Sf<-(Sa*Va)+(Ss*Vs)
plot(Va,Sf)
abline(h=18)
abline(h=5)
Ss<-15
Sf<-(Sa*Va)+(Ss*Vs)
plot(Va,Sf)
abline(h=5)
soil<-c(1,1,0,0,0,0,11,3,4,2,1,0,0,62,14,5)
sum(soil)
soil<-c(1,1,0,0,0,0,11,3,4,2,1,0,0,61,14,4)
sum(soil)
sed<-c(2,2,0,0,0,0,12,8,3,2,1,0,57,11,3)
sum(sed)
rm(sed)
rm(soil)
a<-seq(from=0,to=1,by=0.1)
a
sed<-0.9
soil<-0.8
soil<-0.91
library(factoextra)
?fviz_cluster
library(ChemmineR)
data(sdfsample)
sdfset <- sdfsample
sdfset
sdfset[1:4]
sdfset[[1]]
view(sdfset[1:4])
sdfset <- read.SDFset("http://faculty.ucr.edu/~tgirke/Documents/R_BioCond/Samples/sdfsample.sdf")
header(sdfset[1:4])
header(sdfset[[1]])
atomblock(sdfset[1:4])
bondblock(sdfset[1:4])
datablock(sdfset[1:4])
cid(sdfset)[1:4]
sdfid(sdfset)[1:4]
unique_ids <- makeUnique(sdfid(sdfset))
cid(sdfset) <- unique_ids
blockmatrix <- datablock2ma(datablocklist=datablock(sdfset)) # Converts data block to matrix
numchar <- splitNumChar(blockmatrix=blockmatrix) # Splits to numeric and character matrix
numchar[[1]][1:2,1:2]
numchar[[2]][1:2,10:11]
propma <- data.frame(MF=MF(sdfset), MW=MW(sdfset), atomcountMA(sdfset))
propma[1:4, ]
datablock(sdfset) <- propma
datablock(sdfset[1])
grepSDFset("650001", sdfset, field="datablock", mode="subset")
grepSDFset("650001", sdfset, field="datablock", mode="index")
write.SDF(sdfset[1:4], file="sub.sdf", sig=TRUE)
plot(sdfset[1:4], print=FALSE)
sdf.visualize(sdfset[1:4])
apset <- sdf2ap(sdfset)
apset
data(apset) # Load sample apset data provided by library.
cmp.search(apset, apset[1], type=3, cutoff = 0.3, quiet=TRUE)
library(ChemmineR)
library(ChemmineR)
library(baseline)
install.packages("MSeasy")
library(flux)
install.packages("MSeasy")
data(sdfsample)
sdfsample
summary(sdfsample)
sdfsample[[1]]
class(sdfsample)
?nes()
?new()
data(sdfsample); sdfset <- sdfsample
(sdf <- sdfset[[1]])
header(sdf)
atomblock(sdf)
plot(sdf)
c(7:20,200)
fresh<-c(2.78,2.20,1.76)
sea<-c(2.47,1.67,1.81)
t.test(fresh,sea)
freshIC<-c(2.71,2.68,2.93)
seaIC<-c(3.44,3.56,3.46)
t.test(freshIC,seaIC)
freshTC<-c(5.49,4.88,4.69)
seaTC<-c(5.91,5.23,5.27)
t.test(freshTC,seaTC)
library(ChemmineR)
vignette("ChemmineR")
?smiles2sdf
data(smisample)
smisample
summary(smisample)
smisample[[1]]
View(smisample)
smisample[1]
smisample[2]
smisample[[1]]
smisample[[2]]
class(smisample)
data(smisample); smiset <- smisample
smiset; view(smiset[1:4])
?read.SMIset
head(smisample)
cid(smiset[1:4])
(smivec <- as.character(smiset[1:4]))
smivec
smivec[1]
as(smivec, "SMIset")
test<-c("C(C1=CC=CC=C1)=O","C(C)(=O)C1=CC=CC=C1","C(CCCCCCC\C=C\CCCCCCCC)(=O)O")
test<-c("C(C1=CC=CC=C1)=O","C(C)(=O)C1=CC=CC=C1"
)
)
test<-c("C(C1=CC=CC=C1)=O","C(C)(=O)C1=CC=CC=C1")
test
names(test)<-c("100-52-7","98-86-2")
test
as(test,"SMIset")
SMILEtest<-as(test,"SMIset")
SMILEtest
SMILEtest[[1]]
?smiles2sdf()
smiles2sdf(SMILEtest)
install.packages("ChemmineOB")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version='devel')
BiocManager::install(version='3.16')
BiocManager::install("ChemmineOB")
smiles2sdf(SMILEtest)
sdftest<-smiles2sdf(SMILEtest)
summary(sdftest)
vignette("ChemmineR")
validSDF(sdftest)
sdfTstr <- as(sdftest, "SDFstr")
sdfTstr
sdftest[[1]]
plot(sdftest,print=FALSE)
df <- data.frame(x = 1:10, y = rnorm(10))
# set the size of the plot in centimeters
options(repr.plot.width = 10, repr.plot.height = 6)
# create the plot with ggplot2
ggplot(df, aes(x = x, y = y)) +
geom_point() +
theme(
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black", size = 1),
axis.ticks = element_line(colour = "black", size = 1),
axis.text = element_text(colour = "black", size = 12),
axis.title = element_text(colour = "black", size = 14),
plot.margin = unit(c(1, 1, 1, 1), "cm")
) +
scale_x_continuous(limits = c(1, 10), expand = c(0, 0))
library(ggplot2)
df <- data.frame(x = 1:10, y = rnorm(10))
# set the size of the plot in centimeters
options(repr.plot.width = 10, repr.plot.height = 6)
# create the plot with ggplot2
ggplot(df, aes(x = x, y = y)) +
geom_point() +
theme(
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black", size = 1),
axis.ticks = element_line(colour = "black", size = 1),
axis.text = element_text(colour = "black", size = 12),
axis.title = element_text(colour = "black", size = 14),
plot.margin = unit(c(1, 1, 1, 1), "cm")
) +
scale_x_continuous(limits = c(1, 10), expand = c(0, 0))
?repr.plot.width
?options
df <- data.frame(x = 1:10, y = rnorm(10))
# set the size of the plot in centimeters
options(repr.plot.width = 1, repr.plot.height = 1)
# create the plot with ggplot2
ggplot(df, aes(x = x, y = y)) +
geom_point() +
theme(
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black", size = 1),
axis.ticks = element_line(colour = "black", size = 1),
axis.text = element_text(colour = "black", size = 12),
axis.title = element_text(colour = "black", size = 14),
plot.margin = unit(c(1, 1, 1, 1), "cm")
) +
scale_x_continuous(limits = c(1, 10), expand = c(0, 0))
1/3
a<-1/3
a/(1-a)
a<-.8
a/(1-a)
1-.8
0.33/(1-.33)
(0.08/(1-0.08))-(0.33/(1-.33))
library(devtools)
install_github("IRkernel/IRkernel")
IRkernel::installspec()
library(IRkernel)
installspec()
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
data("iris")
iris<-data("iris")
iris
iris
iris3
iris
data("iris")
iris
dim(iris)
Full<-iris
runif(100,min = 1,max = 150)
?runif
round(runif(100,min = 1,max = 150),0)
summary(as.factor(round(runif(100,min = 1,max = 150),0)))
sample(1:150,100,replace = FALSE)
Iris1<-iris[sample(1:150,100,replace = FALSE),]
set.seed(123)
Iris1<-iris[sample(1:150,100,replace = FALSE),]
sample(1:150,100,replace = FALSE)
sample(1:150,100,replace = FALSE)
set.seed(123)
sample(1:150,100,replace = FALSE)
set.seed(123)
sample(1:150,100,replace = FALSE)
set.seed(123)
iris[sample(1:150,100,replace = FALSE),]
iris[!sample(1:150,100,replace = FALSE),]
iris-sample(1:150,100,replace = FALSE),]
iris[-sample(1:150,100,replace = FALSE),]
set.seed(123)
Iris2<-iris[-sample(1:150,100,replace = FALSE),]
pcaFull<-prcomp(Full[,1:4])
pca1<-prcomp(Iris1[,1:4])
library(factoextra)
library(ggplot2)
fviz_pca_biplot(pcaFull)
fviz_pca_biplot(pcaFull,col.ind = Full$Species)
fviz_pca_biplot(pca1,col.ind = Iris1$Species)
fviz_pca_biplot(pcaFull,col.ind = Full$Species)
fviz_pca_biplot(pca1,col.ind = Iris1$Species)
project<-predict(pca1,data=Iris2[,1:4])
project<-predict(pca1,Iris2[,1:4])
project
fviz_pca_biplot(pca1,col.ind = Iris1$Species)+geom_point(project,aes(x=PC1,y=PC2),size=5)
fviz_pca_biplot(pca1,col.ind = Iris1$Species)+geom_point(project,aes(x=PC1,y=PC2))
fviz_pca_biplot(pca1,col.ind = Iris1$Species)+geom_point(project)
fviz_pca_biplot(pca1,col.ind = Iris1$Species)
fviz_pca_biplot(project,col.ind = Iris2$Species)
pca1$x
plot(pca1$x[1],pca1$x[2])
pca1$x[,1]
plot(pca1$x[,1],pca1$x[,2])
plot(pca1$x[,1],pca1$x[,2],col=as.factor(Iris1$Species))
points(project[,1],project[,2],col="red")
fviz_pca_biplot(pcaFull,col.ind = Full$Species)
plot(pca1$x[,1],pca1$x[,2],col=as.factor(Iris1$Species))
points(project[,1],project[,2],col="red")
fviz_pca_biplot(pcaFull,col.ind = Full$Species)
list(brGDGTs=list("IIIa5","IIIa6","IIIb5","IIIb6","IIIc5","IIIc6","IIa5","IIa6","IIb5","IIb6","IIc5","IIc6","Ia","Ib","Ic"),isoGDGTs=c("GDGT0","GDGT1","GDGT2","GDGT3","Crena","Crenp"))
list(brGDGTs=list("IIIa5","IIIa6","IIIb5","IIIb6","IIIc5","IIIc6","IIa5","IIa6","IIb5","IIb6","IIc5","IIc6","Ia","Ib","Ic"),isoGDGTs=list("GDGT0","GDGT1","GDGT2","GDGT3","Crena","Crenp"))
GDGTs<-list(brGDGTs=list("IIIa5","IIIa6","IIIb5","IIIb6","IIIc5","IIIc6","IIa5","IIa6","IIb5","IIb6","IIc5","IIc6","Ia","Ib","Ic"),isoGDGTs=list("GDGT0","GDGT1","GDGT2","GDGT3","Crena","Crenp"))
GDGTs
inlist(GDGTs)
unlist(GDGTs)
GDGTs<-list(isoGDGTs=list("GDGT0","GDGT1","GDGT2","GDGT3","Crena","Crenp"),brGDGTs=list("IIIa5","IIIa6","IIIb5","IIIb6","IIIc5","IIIc6","IIa5","IIa6","IIb5","IIb6","IIc5","IIc6","Ia","Ib","Ic"))
unlist(GDGTs)
setwd("C:/Users/Marti150/OneDrive - Universiteit Utrecht/Documents/GitHub/ComoUnGDGT")
lat<--48.876667
lon<--123.393333
calibration<-"standard"
mode<-"standard"
calibration<-"SST"
type<-calibration
rm(calibration)
if(type=="SST"){
if(mode=="standard"){Params<-readRDS(file="SST_param_std.rds")
} else if (mode=="analog"){Params<-readRDS(file="SST_param_ana.rds")
} else stop("Calibration mode must be either 'standard' or 'analog'")
} else if(type=="subT"){
if(mode=="standard"){Params<-readRDS(file="subT_param_std.rds")
} else if (mode=="analog"){Params<-readRDS(file="subT_param_ana.rds")
} else stop("Calibration mode must be either 'standard' or 'analog'")
} else stop("Calibration type must be either 'SST' or 'subT'")
grid_half_space<-10
Nloc<-length(lon)
inder_g<-matrix(NaN,nrow = Nloc,1)
lappy(1:Nloc,function(a){which(abs(Params$Locs.Comp[,1]-lon[a])<=grid_half_space & abs(Params$Locs.Comp[,2]-lat[a])<= grid_half_space)})
lapply(1:Nloc,function(a){which(abs(Params$Locs.Comp[,1]-lon[a])<=grid_half_space & abs(Params$Locs.Comp[,2]-lat[a])<= grid_half_space)})
matrix(unlist(lapply(1:Nloc,function(a){which(abs(Params$Locs.Comp[,1]-lon[a])<=grid_half_space & abs(Params$Locs.Comp[,2]-lat[a])<= grid_half_space)})),nrow = Nloc,1)
inder_g<-matrix(unlist(lapply(1:Nloc,function(a){which(abs(Params$Locs.Comp[,1]-lon[a])<=grid_half_space & abs(Params$Locs.Comp[,2]-lat[a])<= grid_half_space)})),nrow = Nloc,1)
lat<-c(-48.876667,-49.876667)
lon<-c(-123.393333,-122.393333)
Nloc<-length(lon)
unlist(lapply(1:Nloc,function(a){which(abs(Params$Locs.Comp[,1]-lon[a])<=grid_half_space & abs(Params$Locs.Comp[,2]-lat[a])<= grid_half_space)})
)
matrix(unlist(lapply(1:Nloc,function(a){which(abs(Params$Locs.Comp[,1]-lon[a])<=grid_half_space & abs(Params$Locs.Comp[,2]-lat[a])<= grid_half_space)})),nrow = Nloc,1)
?rnorm
inder_g<-matrix(unlist(lapply(1:Nloc,function(a){which(abs(Params$Locs.Comp[,1]-lon[a])<=grid_half_space & abs(Params$Locs.Comp[,2]-lat[a])<= grid_half_space)})),nrow = Nloc,1)
alpha_samples<-Params$alpha.samples.comp[inder_g,]
beta_samples<-Params$beta.samples.comp[inder_g,]
inder_g
dim(Params$alpha.samples.comp[inder_g,])
t<-c(10,10)
dim(t*beta_samples)
dim(t*beta_samples+alpha_samples)
alpha_samples<-as.data.frame(alpha_samples)[inder_g,]
beta_samples<-as.data.frame(beta_samples)[inder_g,]
tau2_samples<-kronecker(matrix(1,dim(alpha_samples)[1],1),tau2_samples)
tau2_samples<-kronecker(matrix(1,dim(alpha_samples)[1],1),Params$tau2.samples)
alpha_samples<-matrix(as.matrix(alpha_samples),nrow=1,ncol=dim(alpha_samples)[1]*dim(alpha_samples)[2])
beta_samples<-matrix(as.matrix(beta_samples),nrow=1,ncol=dim(beta_samples)[1]*dim(beta_samples)[2])
alpha_samples<-Params$alpha.samples.comp[inder_g,]
beta_samples<-Params$beta.samples.comp[inder_g,]
inder_g
dim(alpha_samples)
sqrt(Params$tau2_samples)
Params$tau2_samples
Params$tau2.samples
dim(sqrt(Params$tau2.samples))
sqrt(Params$tau2.samples)
as.vector(sqrt(Params$tau2.samples))
dim(kronecker(matrix(1,dim(length(t),1)),sqrt(Params$tau2.samples)))
t
matrix(1,length(t),1))
matrix(1,length(t),1)
kronecker(matrix(1,dim(t)[1],1),sqrt(Params$tau2.samples))
matrix(1,dim(t)[1],1)
kronecker(matrix(1,length(t),1),sqrt(Params$tau2.samples))
dim(kronecker(matrix(1,length(t),1),sqrt(Params$tau2.samples)))
dim(t*beta_samples+alpha_samples)
dim(alpha_samples)
dim(c(alpha_samples))
length(c(alpha_samples))
matrix(rnorm(n=dim(alpha_samples)[1]*dim(alpha_samples)[2],mean=c(t*beta_samples+alpha_samples),sd=c(kronecker(matrix(1,length(t),1),sqrt(Params$tau2.samples)))),nrow=dim(alpha_samples)[1],ncol = dim(alpha_samples)[2])
dim(matrix(rnorm(n=dim(alpha_samples)[1]*dim(alpha_samples)[2],mean=c(t*beta_samples+alpha_samples),sd=c(kronecker(matrix(1,length(t),1),sqrt(Params$tau2.samples)))),nrow=dim(alpha_samples)[1],ncol = dim(alpha_samples)[2]))
